TARGET            =    Cemowy
EXTENSION         =    elf
OUT               =    out
BUILD             =    build
SOURCES           =    src
INCLUDES          =    include
CUSTOM_LIBS       =    lib/glad lib/imgui lib/stb_image lib/stb_truetype lib/cmw

DEFINES           =    CMW_LOG_BACKEND=CMW_LOG_BACKEND_STDOUT
ARCH              =    -march=native -fpie
FLAGS             =    -Wall -pipe
CFLAGS            =    -std=gnu11
CXXFLAGS          =    -std=gnu++17
ASFLAGS           =
LDFLAGS           =    -Wl,-pie
LINKS             =    -lglfw -lglad-pc -lcmw-pc -limgui-pc -lstbi-pc -lstbtt-pc

RELEASE_DEFINES   =    $(DEFINES) NDEBUG=1
RELEASE_FLAGS     =    $(FLAGS) -O2 -ffunction-sections -fdata-sections -flto
RELEASE_CFLAGS    =    $(CFLAGS)
RELEASE_CXXFLAGS  =    $(CXXFLAGS)
RELEASE_ASFLAGS   =    $(ASFLAGS)
RELEASE_LDFLAGS   =    $(LDFLAGS) -Wl,--gc-sections -flto -s

DEBUG_DEFINES     =    $(DEFINES) DEBUG=1
DEBUG_FLAGS       =    $(FLAGS) -g -Og
DEBUG_CFLAGS      =    $(CFLAGS)
DEBUG_CXXFLAGS    =    $(CXXFLAGS)
DEBUG_ASFLAGS     =    $(ASFLAGS) -g
DEBUG_LDFLAGS     =    $(LDFLAGS) -g -Wl,-Map,$(BUILD)/$(TARGET).pc-dbg.map

PREFIX            =
CC                =    $(PREFIX)gcc
CXX               =    $(PREFIX)g++
AS                =    $(PREFIX)as
LD                =    $(PREFIX)g++

# -----------------------------------------------

LIBS              =    $(CUSTOM_LIBS)

CFILES            =    $(shell find $(SOURCES) -name *.c)
CPPFILES          =    $(shell find $(SOURCES) -name *.cpp)
SFILES            =    $(shell find $(SOURCES) -name *.s -or -name *.S)

RELEASE_OFILES    =    $(CFILES:%=$(BUILD)/%.pc-rel.o) $(CPPFILES:%=$(BUILD)/%.pc-rel.o) $(SFILES:%=$(BUILD)/%.pc-rel.o)
DEBUG_OFILES      =    $(CFILES:%=$(BUILD)/%.pc-dbg.o) $(CPPFILES:%=$(BUILD)/%.pc-dbg.o) $(SFILES:%=$(BUILD)/%.pc-dbg.o)
DFILES            =    $(RELEASE_OFILES:.o=.d) $(DEBUG_OFILES:.o=.d)

LIBS_TARGET       =    $(shell find $(CUSTOM_LIBS) -name "*-pc.a")
RELEASE_TARGET    =    $(if $(OUT:=), $(OUT)/$(TARGET)-pc.$(EXTENSION), .$(OUT)/$(TARGET)-pc.$(EXTENSION))
DEBUG_TARGET      =    $(if $(OUT:=), $(OUT)/$(TARGET)-pc-dbg.$(EXTENSION), .$(OUT)/$(TARGET)-pc-dbg.$(EXTENSION))

REL_DEFINES_FLAGS =    $(addprefix -D,$(RELEASE_DEFINES))
DBG_DEFINES_FLAGS =    $(addprefix -D,$(DEBUG_DEFINES))

INCLUDE_FLAGS     =    $(addprefix -I,$(INCLUDES)) $(foreach dir,$(LIBS),-I$(dir)/include)
LIB_FLAGS         =    $(foreach dir,$(LIBS),-L$(dir)/lib)

# -----------------------------------------------

.SUFFIXES:

.PHONY: all libs release debug run clean mrproper

all: release debug

libs:
	@for dir in $(CUSTOM_LIBS); do $(MAKE) --no-print-directory -C $$dir -f Makefile.pc; done

release: libs $(RELEASE_TARGET)

debug: libs $(DEBUG_TARGET)

run: debug
	@echo "Running" $(DEBUG_TARGET)
	@$(DEBUG_TARGET)

$(RELEASE_TARGET): $(LIBS_TARGET) $(RELEASE_OFILES)
	@echo " LD  " $@
	@mkdir -p $(dir $@)
	@$(LD) $(ARCH) $(RELEASE_LDFLAGS) $(LIB_FLAGS) $^ -o $@ $(LINKS)
	@echo "Built" $(notdir $@)

$(DEBUG_TARGET): $(LIBS_TARGET) $(DEBUG_OFILES)
	@echo " LD  " $@
	@mkdir -p $(dir $@)
	@$(LD) $(ARCH) $(DEBUG_LDFLAGS) $(LIB_FLAGS) $^ -o $@ $(LINKS)
	@echo "Built" $(notdir $@)

$(BUILD)/%.c.pc-rel.o: %.c
	@echo " CC  " $@
	@mkdir -p $(dir $@)
	@$(CC) -MMD -MP $(ARCH) $(RELEASE_FLAGS) $(RELEASE_CFLAGS) $(REL_DEFINES_FLAGS) $(INCLUDE_FLAGS) -c $< -o $@

$(BUILD)/%.c.pc-dbg.o: %.c
	@echo " CC  " $@
	@mkdir -p $(dir $@)
	@$(CC) -MMD -MP $(ARCH) $(DEBUG_FLAGS) $(DEBUG_CFLAGS) $(DBG_DEFINES_FLAGS) $(INCLUDE_FLAGS) -c $< -o $@

$(BUILD)/%.cpp.pc-rel.o: %.cpp
	@echo " CXX " $@
	@mkdir -p $(dir $@)
	@$(CXX) -MMD -MP $(ARCH) $(RELEASE_FLAGS) $(RELEASE_CXXFLAGS) $(REL_DEFINES_FLAGS) $(INCLUDE_FLAGS) -c $< -o $@

$(BUILD)/%.cpp.pc-dbg.o: %.cpp
	@echo " CXX " $@
	@mkdir -p $(dir $@)
	@$(CXX) -MMD -MP $(ARCH) $(DEBUG_FLAGS) $(DEBUG_CXXFLAGS) $(DBG_DEFINES_FLAGS) $(INCLUDE_FLAGS) -c $< -o $@

$(BUILD)/%.s.pc-rel.o: %.s %.S
	@echo " AS  " $@
	@mkdir -p $(dir $@)
	@$(AS) -MMD -MP -x assembler-with-cpp $(ARCH) $(RELEASE_FLAGS) $(RELEASE_ASFLAGS) $(INCLUDE_FLAGS) -c $< -o $@

$(BUILD)/%.s.pc-dbg.o: %.s %.S
	@echo " AS  " $@
	@mkdir -p $(dir $@)
	@$(AS) -MMD -MP -x assembler-with-cpp $(ARCH) $(DEBUG_FLAGS) $(DEBUG_ASFLAGS) $(INCLUDE_FLAGS) -c $< -o $@

clean:
	@echo Cleaning...
	@rm -rf $(shell find $(BUILD) $(OUT) -name "*pc*")

mrproper: clean
	@for dir in $(CUSTOM_LIBS); do $(MAKE) clean --no-print-directory -C $$dir -f Makefile.pc; done

nx:
	@:

-include $(DFILES)
