TARGET            =    lib$(notdir $(CURDIR))
EXTENSION         =    a
OUT               =    lib
BUILD             =    build
SOURCES           =    glfw/src
INCLUDES          =    include
LIBS              =

COMMON_CFILES     =    context.c init.c input.c monitor.c vulkan.c window.c
X11_CFILES        =    x11_init.c x11_monitor.c x11_window.c \
                       xkb_unicode.c posix_time.c posix_thread.c glx_context.c \
                       egl_context.c osmesa_context.c linux_joystick.c

DEFINES           =    _GLFW_X11=1
ARCH              =    -march=native
FLAGS             =    -Wall -g -pipe -O2 -ffunction-sections -fdata-sections -flto -ffat-lto-objects
CFLAGS            =    -std=gnu11
CXXFLAGS          =    -std=gnu++17
ASFLAGS           =
ARFLAGS           =    -qc

PREFIX            =
CC                =    $(PREFIX)gcc
CXX               =    $(PREFIX)g++
AS                =    $(PREFIX)as
AR                =    $(PREFIX)gcc-ar
RANLIB            =    $(PREFIX)gcc-ranlib

# -----------------------------------------------

CFILES            =    $(COMMON_CFILES:%=$(SOURCES)/%)
CFILES           +=    $(X11_CFILES:%=$(SOURCES)/%)
CPPFILES          =    $(shell find $(SOURCES) -name *.cpp)
SFILES            =    $(shell find $(SOURCES) -name *.s -or -name *.S)
OFILES            =    $(CFILES:%=$(BUILD)/%.pc.o) $(CPPFILES:%=$(BUILD)/%.pc.o) $(SFILES:%=$(BUILD)/%.pc.o)
DFILES            =    $(OFILES:.o=.d)

DEFINE_FLAGS      =    $(addprefix -D,$(DEFINES))
LIB_TARGET        =    $(if $(OUT:=), $(OUT)/$(TARGET)-pc.$(EXTENSION), .$(OUT)/$(TARGET)-pc.$(EXTENSION))

INCLUDE_FLAGS     =    $(addprefix -I,$(INCLUDES)) $(foreach dir,$(LIBS),-I$(dir)/include)

# -----------------------------------------------

.SUFFIXES:

.PHONY: all clean

all: $(LIB_TARGET)

$(LIB_TARGET): $(OFILES)
	@echo " AR  " $@
	@mkdir -p $(dir $@)
	@rm -f $@
	@$(AR) $(ARFLAGS) $@ $^
	@$(RANLIB) $@
	@echo "Built" $(notdir $@)

$(BUILD)/%.c.pc.o: %.c
	@echo " CC  " $@
	@mkdir -p $(dir $@)
	@$(CC) -MMD -MP $(ARCH) $(FLAGS) $(CFLAGS) $(DEFINE_FLAGS) $(INCLUDE_FLAGS) -c $< -o $@

$(BUILD)/%.cpp.pc.o: %.cpp
	@echo " CXX " $@
	@mkdir -p $(dir $@)
	@$(CXX) -MMD -MP $(ARCH) $(FLAGS) $(CXXFLAGS) $(DEFINE_FLAGS) $(INCLUDE_FLAGS) -c $< -o $@

$(BUILD)/%.s.pc.o: %.s %.S
	@echo " AS  " $@
	@mkdir -p $(dir $@)
	@$(AS) -MMD -MP -x assembler-with-cpp $(ARCH) $(FLAGS) $(ASFLAGS) $(INCLUDE_FLAGS) -c $< -o $@

clean:
	@echo Cleaning...
	@rm -rf $(shell find $(BUILD) $(OUT) -name "*pc*")

-include $(DFILES)
